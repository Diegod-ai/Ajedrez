#lang racket

(require graphics/graphics )
(open-graphics) 
(define ventana1 (open-viewport "Ajedrez"  800 600))


(define (dibujar a b e)
  
  ((draw-string ventana1) (make-posn 200 30) "     AJEDREZ" "brown")
  (if (> e 8)
      ((draw-rectangle ventana1) (make-posn 50 50) 401 401 "black")
      (if (> a 400)
          (dibujar 50 (+ b 50) (+ e 1))
          (begin
            (if(odd? e)
               (if (odd? (/ a 50 ) )
                   (begin
                    ((draw-solid-rectangle ventana1)(make-posn a b) 50 50 "white")
                    (dibujar(+ a 50)b e))
                   (begin
                     ((draw-solid-rectangle ventana1)(make-posn a b) 50 50 "slate blue")
                     (dibujar(+ a 50)b e))     
                   )
               (if(odd?(/ a 50) )
                  (begin
                    ((draw-solid-rectangle ventana1)(make-posn a b) 50 50 "slate blue")
                    (dibujar(+ a 50)b e))
                  
                  (begin
                    ((draw-solid-rectangle ventana1)(make-posn a b) 50 50 "white")
                    (dibujar(+ a 50)b e))
                  )                  
               )
            )
          )
      )
  ) ;EndFunction Dibujar, sirve para guardar el tablero que se va a dibujar cuadro por cuadro 

; Este identificador guarda los parametros de dibujo y lo simplifica en un solo llamado que nombramos como "table"

(define (table tableString)
  (dibujar 50 50 1) (PiecePut tableString 0))

;fichas blancas
(define BishopW   "WhitePieces/whiteBishop.png")
(define KnightW "WhitePieces/whiteKnight.png")
(define rookW   "WhitePieces/whiteRook.png")
(define kingW     "WhitePieces/whiteKing.png")
(define queenW   "WhitePieces/whiteQueen.png")
(define pawnW    "WhitePieces/whitePawn.png" )


;fichas negras
(define BishopB   "BlackPieces/blackBishop.png")
(define KnightB "BlackPieces/blackKnight.png")
(define rookB   "BlackPieces/blackRook.png")
(define kingB     "BlackPieces/blackKing.png")
(define queenB   "BlackPieces/blackQueen.png")
(define pawnB "BlackPieces/blackPawn.png" )
 

;finalizar de llamar fichas negras


;PieceAsignament evalua el caracter que se encuentra en otra funcion y lo evalua con un caracter que
;se refiere a una pieza del ajedrez, y despues le afilia una imagen
( define ( PieceAsignament char)

   ( if ( equal? char #\T)
        rookB
        ( if ( equal? char #\C)
             KnightB
             ( if ( equal? char #\A)
                  BishopB
                  ( if ( equal? char #\D)
                       queenB
                       (if ( equal? char #\R )
                           kingB
                           (if ( equal? char #\P )
                               pawnB
                               ( if ( equal? char #\t)
                                    rookW
                                    ( if ( equal? char #\c)
                                         KnightW
                                         ( if ( equal? char #\a)
                                              BishopW
                                              ( if ( equal? char #\d)
                                                   queenW
                                                   (if ( equal? char #\r)
                                                       kingW
                                                       (if ( equal? char #\p )
                                                           pawnW 
                                                           "";else
                                                           ) ;end if ( equal? char #\p)
                                                       ) ;end if ( equal? char #\r)        
                                                   ) ;end if ( equal? char #\d)             
                                              ) ;end if ( equal? char #\a)                  
                                         ) ;end if ( equal? char #\c)                       
                                    ) ;end if ( equal? char #\t)
                               ) ;end if ( equal? char #\P) 
                           ) ;end if ( equal? char #\R)
                       ) ;end if ( equal? char #\D)
                  ) ;end if ( equal? char #\A)
             ) ;end if ( equal? char #\C)
        ) ;end if ( equal? char #\T)
   ) ;endFunction PieceAsignament

; InicialTable nos muestra el tablero inicial
(define inicialTable (string-append
                      "TCADRACT" ;fichas negras 
                      "PPPPPPPP" ;peones negros
                      "Txxxxxxx" ;espacio en blanco
                      "xxxxxxxx" ;espacio en blanco
                      "xxxxxxxx" ;espacio en blanco
                      "Txxxxxxx" ;espacio en blanco
                      "pppppppp" ;peones blancos
                      "tcadract" ;fichas blancas
                      ))

;;Creamos la funcion PiecePut que sirve para poner la ficha en su lugar correspondiente
;;comparando cada parte de la funcion "InicialTable"
(define (PiecePut str count)
  
  (if (< count (string-length str))
      
      (if (not (equal? (string-ref str count) #\x))  
          (begin                                                                              
        
            (((draw-pixmap-posn (PieceAsignament (string-ref str count))) ventana1) (make-posn (* (+ 1 (remainder count 8)) 50) (* (+ 1 (quotient count 8)) 50)))
            (PiecePut str (+ count 1))
            );endBegin and start else
          (PiecePut str (+ count 1)) ;llama la funcion y le suma 1 al contador
               
          );end (if (not (equal? (string-ref str count) #\x)) and start else
      (void)        
      );end (if (< count (string-length str))
  ); EndFunction PiecePut
;en esta funcion, ponemos las fichas segun la comparacion que hizo arriba

;aqui llamamos la funcion que llama el tablero y las fichas
(table inicialTable )

;;------------------StartFunction Casillas-----------------;;

;;Aqui creamos una funcion global que facilitara los clicks en todo el codigo
;;funcion (casilla a b) cuando se llamara tomara los diferentes
;;parametros que le asignaremos en las demas funciones

(define (casilla a b)
   ( - (+ a (* b 8)) 9 ))
(define (pos-x click) (quotient (posn-x click) 50))
(define (pos-y click) (quotient (posn-y click) 50))

;;------------------EndFunction Casillas-----------------;;

;;------------------StarFunction CasillasLimite-----------------;;
(define (limites posn)

  (define posnx (posn-x posn))
  (define posny (posn-y posn))
  
  (if (or (< posnx 50 ) (< posny 50 ) (> posnx 450 ) (> posny 450 ))
      (limites (mouse-click-posn (get-mouse-click ventana1)));else
      posn
      );endIf
);;------------------EndFunction CasillasLimite-----------------;;


;;------------------StartFunction ColorComprobant-----------------;;

 (define (colorComprobant click str)
   
   (define comprobada (limites click ))
   (define pos-xComp (pos-x comprobada))
   (define pos-yComp (pos-y comprobada))
   (define Comprobant (casilla pos-xComp pos-yComp))
  
  (if ( or (equal? (string-ref str Comprobant) #\T ) (equal? (string-ref str Comprobant) #\C )
         (equal? (string-ref str Comprobant) #\A ) (equal? (string-ref str Comprobant) #\D )
         (equal? (string-ref str Comprobant) #\R ) (equal? (string-ref str Comprobant) #\P ));EndCondition or
   ;Si la pieza es negra devolvera un 1
    1 ; else
    
   (if ( or (equal? (string-ref str Comprobant) #\t ) (equal? (string-ref str Comprobant) #\c )
         (equal? (string-ref str Comprobant) #\a ) (equal? (string-ref str Comprobant) #\d )
         (equal? (string-ref str Comprobant) #\r ) (equal? (string-ref str Comprobant) #\p ));EndCondition or
    ;si la pieza es blanca devolvera un -1 
      -1 ; else

      ; en caso contrario, no devuelve nada
      (void)
   ); Endif que comprueba que las fichas son negras
  ); Endif que comprueba que las fichas son Blancas
 );;------------------EndFunction ColorComprobant-----------------;;

;;------------------StarFunction MakeString-----------------;;
(define (MakeString oldString char oldPos newPos)
   ( if (= oldPos newPos)
       oldString
       (if (> oldPos newPos)
           (string-append (substring oldString 0 newPos) (~a char) (substring oldString (add1 newPos) oldPos) "x" (substring oldString (add1 oldPos)))
           (string-append (substring oldString 0 oldPos) "x" (substring oldString (add1 oldPos) newPos) (~a char) (substring oldString (add1 newPos)))
           );EndIf
       );endIf

  );;------------------EndFunction MakeString-----------------;;

;;------------------StarFunction generalMove-----------------;;

(define (generalMove oldString oldPos turn)
  
  (define click (mouse-click-posn (get-mouse-click ventana1)))
  
  (define comprobada (limites click) )
  (define pos-xNew (pos-x comprobada))
  (define pos-yNew (pos-y comprobada))
  (define newPos (casilla pos-xNew pos-yNew))
  (define makeMove (MakeString oldString (string-ref oldString oldPos) oldPos newPos))
  (printf "turnodoooos ~a"pos-xNew)

  ;;------------------StartFunctionMovements-----------------;;

(define (movements?)

;;------------------StartFunction pawnMovements-----------------;;

  (define (pawnMovements?)
  
    (if (equal? turn 1 )
      
        (if ( and ( >= oldPos 8 ) ( <= oldPos 15 ) (equal? (string-ref oldString oldPos) #\P) (= oldPos (- newPos 16))
                  (equal? (string-ref oldString (- newPos 8)) #\x) (equal? (string-ref oldString newPos) #\x))
            #t
            (if  (and (equal? (string-ref oldString oldPos) #\P) (= oldPos (- newPos 8))
                      (equal? (string-ref oldString newPos) #\x))
                 #t
                 (if (and (equal? (string-ref oldString oldPos) #\P) (or (= oldPos (- newPos 7)) (= oldPos (- newPos 9)))
                          (equal? (colorComprobant comprobada oldString) -1 )) 
                     #t
                     #f
                 );;EndIf
            );EndIf
        );EndIf
        
        (if ( and ( >= oldPos 48 ) ( <= oldPos 55 ) (equal? (string-ref oldString oldPos) #\p) (= oldPos (+ newPos 16))
                  (equal? (string-ref oldString (+ newPos 8)) #\x) (equal? (string-ref oldString newPos) #\x))
            #t
            (if  (and (equal? (string-ref oldString oldPos) #\p) (= oldPos (+ newPos 8))
                      (equal? (string-ref oldString newPos) #\x))
                 #t
                 (if (and (equal? (string-ref oldString oldPos) #\p) (or (= oldPos (+ newPos 7)) (= oldPos (+ newPos 9)))
                          (equal? (colorComprobant comprobada oldString) 1 )) 
                     #t
                     #f
                 );;EndIf
            );EndIf
        );;EndIf
    );EndIf
  
  );;------------------EndFunction pawnMovements-----------------;;

  (if (= oldPos newPos)
      #f
     (pawnMovements?))
  
 );;------------------EndFunction movements?-----------------;;

  (if (movements?)
      (if (not (equal? makeMove oldString))
          (begin
            (table makeMove)
            (turns makeMove (* -1 turn )))
          (turns oldString turn)
          );EndIf
      (turns oldString turn)
      );endIf
      
  
  );;------------------EndFunction generalMove-----------------;;

;;------------------StartFunction turns-----------------;;
(define (turns string turn)
  
  (define click (mouse-click-posn (get-mouse-click ventana1)))
  (define comprobada (limites click) )
  (define pos-xPiece (pos-x comprobada))
  (define pos-yPiece (pos-y comprobada))
  (define piecePos (casilla pos-xPiece pos-yPiece))
  (define piece (colorComprobant comprobada string))
  (printf "turnooo1")
  
  (define (whiteTurn)
    
    (if (equal? piece -1)
        
          (generalMove string piecePos turn)
        
        (turns string turn)
        );EndIf
    )
  (define (blackTurn)
    
    (if (equal? piece 1)

        (generalMove string piecePos turn)
        
        (turns string turn)
          
        );EndIf
    )
  (if (equal? turn -1)
      (whiteTurn)
      (blackTurn)
      );EndIf
  );;------------------EndFunction turns-----------------;;



(turns inicialTable -1)



;;Coronacion

(define (coronation clickOption)
  
  ;Este identificador va a guardar las iniciales de las fichas Negras
  (define selectStringB  (string-append "T" "C" "A" "D" ))
  ;Este identificador va a guardar las iniciales de las fichas Blancas
  (define selectStringW (string-append "t" "c" "a" "d") )
  
  (define pos-x. (pos-x clickOption))
  (define pos-y. (pos-y clickOption))
  (define Option (casilla pos-x. pos-y. ))
  
   
  ;;Esta funcion solo sirve para poner las fichas en el lateral izquierdo al momento de querer seleccionar el cambio de ficha 
  (define (PiecePutOnSelection str count)
    (define x 525)
    (define y (+ 150 (* count 50)))
    
    ;;Si el contador es menor al tamaño de la string que llamamos 
    (if (< count (string-length str))
        
        (begin
          ((draw-rectangle ventana1) (make-posn 500 150) 100 200)
          (((draw-pixmap-posn
             (PieceAsignament (string-ref str count)))
            ventana1)
           (make-posn x y))
          (PiecePutOnSelection str (+ count 1))
          );endBegin;;else
        (PiecePutOnSelection str (+ count 1))      
        );end (if (< count (string-length str))
    ); EndFunction PiecePutOnSelection

  ;;En caso de que el peon Blanco se encuentre en el rango va a llamar la funcion de seleccion de ficha
  ;; "selectStringW"
  (if (and (>= Option 0) (<= Option 7) (equal? (string-ref inicialTable Option) #\p))
       
      (PiecePutOnSelection selectStringW 0)

      ;;En caso contrario, si el peon negro se encuentra en rango, va a llamar la funcio de seleccion de ficha
      ;; "selectStringB"
      (if (and (>= Option 56) (<= Option 63) (equal? (string-ref inicialTable Option) #\P))
          
          (PiecePutOnSelection selectStringB 0)
     
          (coronation (mouse-click-posn (get-mouse-click ventana1)))

          ) ;EndIf (and (>= (pawnMovement) 56) (<= (pawnMovement) 63)...#\P))
      ); EndIf (and (>= (pawnMovement) 0) (<= (pawnMovement) 7)...#\p))
  );EndFunction Coronation

 
