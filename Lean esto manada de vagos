#lang racket

;;Esta es la prueba
;;Si el turno es de las blancas, debemos buscar la posicion del rey contrario (negro)
;;El codigo entonces va a hacer un recorrido, casilla por casilla, tratando de encontrar el rey

(define str (string-append
                      "xxxxxxxx" ;fichas negras 
                      "AxxxxxAx" ;peones negros
                      "xrxxxxxx" ;espacio en blanco
                      "AxAxxxxx" ;espacio en blanco 
                      "xxxxxxxx" ;espacio en blanco
                      "xxxxxxxx" ;espacio en blanco
                      "xxxxxxxx" ;peones blancos
                      "xxxxxxxx" ;fichas blancas
                      ))
;;Aqui el turno es de las negras (debe buscar el rey blanco)

  (define (check turn string)
    
    (define (findTheKing counter)
  
      (define kingToSearch (if (= turn 1)
                               #\r
                               #\R
                               );;EndIf
        );;EndIdentificador

      ( if (= counter 63)
           63
           (if  (equal? (string-ref str counter) kingToSearch )
       
                counter
       
                (findTheKing  (add1 counter))
                );;EndIf
           )
      );;EndFunction findTheKing

;;Listo, este codigo ya nos devuelve la posicion actual del rey contrario

(findTheKing 0)

(define xPosKing (remainder (findTheKing 0) 8 ))
(define yPosKing (quotient (findTheKing 0) 8 ))

;;Este identificador es para la cantidad de cuadros que puede avanzar hacia la derecha superior
(define rightDistanceUp (* 7 (- 8 (add1 xPosKing))) )
;;Este identificador es para la cantidad de cuadros que puede avanzar hacia la izquierda inferior
(define leftDistanceDown (* 7 xPosKing))
;;Este identificador es para la cantidad de cuadros que puede avanzar hacia la derecha inferior
(define rightDistanceDown (* 9 (- 8 (add1 xPosKing))) )
;;Este identificador es para la cantidad de cuadros que puede avanzar hacia la izquierda superior
(define leftDistanceUp (* 9 xPosKing))
    rightDistanceUp
    
    (define (checkDiagonal)

      (define (diagonalCheck distance)
        
        (if (= distance 0)
            "no esta en jaque"
            
            (if (equal? turn 1)
            
                (if (or (equal? (string-ref str distance) #\A) (equal? (string-ref str distance) #\D))
                    "esta en jaque"
                    (diagonalCheck (- distance 7))
                    );;EndIf
                (if (or (equal? (string-ref str distance) #\a) (equal? (string-ref str distance) #\d))
                    "esta en jaque"
                    (diagonalCheck (- distance 7))
                    );;EndIf
                );;EndIf
            );;EndIf
        );;EndFunction
    
  (define (diagonalCheckPawn)
    
    (if (equal? turn 1)
    
        (if (or (and (equal? (string-ref str (- (findTheKing 0) 7 )) #\P ) (< xPosKing (remainder (- (findTheKing 0) 7) 8)))
                (and (equal? (string-ref str (- (findTheKing 0) 9 )) #\P ) (< (remainder (- (findTheKing 0) 9) 8) xPosKing)))
            "te tiene en jaque un pion"
            "parchate man"
            );;End
        (if (or (and (equal? (string-ref str (+ (findTheKing 0) 9 )) #\p ) (< xPosKing (remainder (+ (findTheKing 0) 9) 8)))
                (and (equal? (string-ref str (+ (findTheKing 0) 7 )) #\p ) (< (remainder (+ (findTheKing 0) 7) 8) xPosKing)))
            "te tiene en jaque un pion"
            "parchate man"
            );;End
        );;EndIf
    );;EndDefine

     (diagonalCheck  rightDistanceUp)
      
    );;checkDiagonal
    
(checkDiagonal)
    
);;EndDefine check


(check 1 str)
