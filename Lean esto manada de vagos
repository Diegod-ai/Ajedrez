#lang racket

;;Esta es la prueba
;;Si el turno es de las blancas, debemos buscar la posicion del rey contrario (negro)
;;El codigo entonces va a hacer un recorrido, casilla por casilla, tratando de encontrar el rey

(define str (string-append
                      "xxxxxxxx" ;fichas negras 
                      "xxxxxxxx" ;peones negros
                      "xxxxxxxx" ;espacio en blanco
                      "xxxxxxxx" ;espacio en blanco 
                      "axxxxxxR" ;espacio en blanco
                      "xxxxxxxx" ;espacio en blanco
                      "xxxxxxxx" ;peones blancos
                      "xxxxxxxx" ;fichas blancas
                      ))
;;Aqui el turno es de las negras (debe buscar el rey blanco)

  (define (check turn string)
    
    (define (findTheKing counter)
  
      (define kingToSearch (if (= turn 1)
                               #\r
                               #\R
                               );;EndIf
        );;EndIdentificador

      ( if (= counter 63)
           63
           (if  (equal? (string-ref str counter) kingToSearch )
       
                counter
       
                (findTheKing  (add1 counter))
                );;EndIf
           )
      );;EndFunction findTheKing

;;Listo, este codigo ya nos devuelve la posicion actual del rey contrario

(define kingPos (findTheKing 0))

(define xPosKing (remainder kingPos 8 ))
(define yPosKing (quotient kingPos 8 ))

    
    (define (checkDiagonal number)
      
        ;;Este identificador es para la cantidad de cuadros que puede avanzar hacia la derecha superior
        (define rightDistanceUp (- kingPos (* 7 number)))
        ;;Este identificador es para la cantidad de cuadros que puede avanzar hacia la izquierda inferior
        (define leftDistanceDown (+ kingPos (* 7 number)))
        ;;Este identificador es para la cantidad de cuadros que puede avanzar hacia la derecha inferior
        (define rightDistanceDown (+ kingPos (* 9 number)) )
        ;;Este identificador es para la cantidad de cuadros que puede avanzar hacia la izquierda superior
        (define leftDistanceUp (- kingPos (* 9 number)))
      
      (define (diagonalCheck value)
            (if (equal? turn 1)
            
                (if (or
                    (equal? (string-ref str value) #\A) (equal? (string-ref str value) #\D))
                    "esta en jaque"
                    (checkDiagonal (- number 1))
                    );;EndIf
                (if (or
                    (equal? (string-ref str value) #\a) (equal? (string-ref str value) #\d))
                    "esta en jaque"
                    (checkDiagonal (- number 1))
                    );;EndIf
                );;EndIf
            );;EndDefine
    
  (define (diagonalCheckPawn)
    
    (if (equal? turn 1)
    
        (if (or (and (equal? (string-ref str (- kingPos 7 )) #\P ) (< xPosKing (remainder (- kingPos 7) 8)))
                (and (equal? (string-ref str (- kingPos 9 )) #\P ) (< (remainder (- kingPos 9) 8) xPosKing)))
            "te tiene en jaque un pion"
            "parchate man"
            );;End
        (if (or (and (equal? (string-ref str (+ kingPos 9 )) #\p ) (< xPosKing (remainder (+ kingPos 9) 8)))
                (and (equal? (string-ref str (+ kingPos 7 )) #\p ) (< (remainder (+ kingPos 7) 8) xPosKing)))
            "te tiene en jaque un pion"
            "parchate man"
            );;End
        );;EndIf
    );;EndDefine
    
(if (= number 0)
    "no esta en jaque"
      (if (and (> rightDistanceUp 0) (> 64 rightDistanceUp)) (diagonalCheck rightDistanceUp)
      (if (and (> rightDistanceDown 0) (> 64 rightDistanceDown)) (diagonalCheck rightDistanceDown)
      (if (and (> leftDistanceUp 0) (> 64 leftDistanceUp)) (diagonalCheck leftDistanceUp)
      (if (and (> leftDistanceDown 0) (> 64 leftDistanceDown)) (diagonalCheck leftDistanceDown) (checkDiagonal (- number 1)))
      )))
      );;EndIf
    );;checkDiagonal
    
(checkDiagonal 7)
);;EndDefine check


(check -1 str)
